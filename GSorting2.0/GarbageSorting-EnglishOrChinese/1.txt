Android端
一、 MVC架构
MVC是一种经典的Android开发软件架构模式，它将整个App划分为三个主要部分：模型（Model）、视图（View）和控制器（Controller）。模型是应用程序中用于存储数据和业务逻辑的部分；视图是应用程序中用于呈现数据给用户的部分；控制器是应用程序中用于协调模型和视图之间的交互的部分。
Model层是用于存储数据和实现业务逻辑的组件。在垃圾分类App中，它是SQLite本地数据库相关类，用于存储用户信息和应用程序数据。同时也是垃圾分类数据查询公共API，用于获取垃圾分类相关数据。
View视图层是用户与应用程序交互的组件。视图是用户界面，在App中它作为XML布局文件、Activity和Fragment，用于呈现数据给用户。
Controller控制器层是Activity中用于管理用户登录注册等逻辑的代码，或用于发送网络请求和处理响应的代码。App中使用OkHttp来发送网络请求，然后使用Activity和Fragment来协调请求和响应之间的交互。

二、数据持久化
数据持久化将数据保存在设备上以便以后使用。在这个App中，使用到的是SQLite数据库和SharedPreferences。
在垃圾分类App中，使用SQLite来存储用户的登录信息和应用程序数据。程序中创建了一个用户表，包含用户ID、用户名、密码等信息，并在用户注册时将其保存到SQLite数据库中。此外，还有一个存储垃圾分类信息的数据库表用于存储自定义的垃圾分类信息。
此外，SharedPreferences是一种轻量级的键值对存储机制，它提供了一种简单的方式来存储和读取应用程序的配置信息。在程序中使用SPUtil类来存储一些用户偏好设置，如用户选择的语言。

三、 网络请求和解析
OkHttp是一款常用的网络请求库，它提供了一系列功能强大的网络请求API，可以帮助开发人员快速、高效地进行网络请求。程序封装了OkHttpTool用于快捷调用OkHttp进行请求的发送和回调。涉及到以下技术点：
请求调用。OkHttp提供了一个简单的API来发送HTTP请求，可以通过设置请求的URL、请求参数、请求头等信息来构建一个HTTP请求，并将其发送到服务器。
回调。在进行网络请求时需要监听请求的状态，如请求成功、请求失败等。OkHttp提供了回调机制，注册一个回调函数就可以在请求完成时获取请求的结果并进行相应的处理。
线程的切换。在进行网络请求时，通常需要在后台线程中进行网络请求，并在请求完成后切换回主线程进行UI更新。在Android开发中，最常见的线程切换方式是使用runOnUiThread方法，在主线程中更新UI。
Json的解析。在进行网络请求时，需要从服务器返回的Json数据中解析出需要的信息。OkHttp并不提供Json解析功能，在代码中，使用了Gson进行Json解析，通过将Json数据解析为Java对象的方式，更方便地进行后续操作。还使用到了TypeToken，它是Gson中用于处理Java泛型的类，可用于获取泛型类型的Type对象，从而解决Gson解析泛型时类型擦除的问题。

四、Android中使用Handler机制实现异步消息处理
在Android应用中，Handler机制是实现异步消息处理的常用技术。Handler主要用于在不同线程之间传递消息，它可以将消息放入消息队列中，然后在合适的时间执行。通过Handler机制，我们可以实现很多常见的异步操作，例如网络请求、耗时计算等，从而保证应用的流畅性和响应性。
在代码中，使用Handler机制实现了异步任务。首先在新线程中执行网络请求操作，请求返回后将结果放入消息中。在UI线程中通过Handler接收消息，并解析响应结果。根据响应结果进行相应的UI更新操作，例如显示列表、提示用户等。通过这种方式实现了网络请求的异步处理，并且保证了UI线程的响应性。

后端
一、 Django框架和垃圾分类API实现
Django是一种Web应用程序框架，可以使用它来构建高性能、可扩展的Web服务。通过Django实现了垃圾分类API，主要通过接收图片的Base64编码，将其传递给PyTorch进行图片识别，返回垃圾分类结果的功能。通过在views.py中定义一个接收Base64编码图片的API接口，该接口接收POST请求，将图片编码解码后存储到临时文件中，并将文件路径传递给PyTorch模型进行识别，然后将分类结果和分类概率返回给Android客户端。

二、 图片预处理
首先使用了使用Pillow库的Image模块读取图片，并将其转换为PIL Image对象。由于图片大小不确定，因此需要将其调整为指定大小。使用Pillow库的Image模块中的resize函数来实现将图片最短边缩放到指定大小，然后按照相同的比例缩放另一条边。由于模型输入大小是固定的，因此需要对调整后的图片进行中心裁剪，以便与模型输入大小匹配，此处使用Pillow库的Image模块中的crop函数实现。考虑到神经网络的输入需要归一化，需要对裁剪后的图像进行归一化处理。

三、深度学习模型训练
首先收集垃圾分类数据集，包括各类垃圾图片。此处使用了一个包含多种垃圾类别的数据集，如可回收物、有害垃圾、厨余垃圾和其他垃圾。数据集中的图像已经进行了预处理，包括缩放、裁剪和数据增强等操作，以提高模型的泛化能力。选择ResNet18模型作为分类器。ResNet18包含1个输入层、1个卷积层、1个最大池化层、8个残差块（共16个卷积层）、1个平均池化层、1个全连接层和1个Softmax层。残差连接在每个残差块内部实现，将输入直接与输出相加，从而缓解梯度消失问题。由于垃圾分类任务特性，还需要对模型进行了微调。具体来说，将全连接层的输出节点数修改为垃圾分类任务的类别数，并使用随机初始化的权重替换了预训练权重。使用交叉熵损失函数进行优化，并使用随机梯度下降算法进行训练。在训练过程中使用学习率调整策略，例如学习率衰减和动量等方法来提高训练效果；在训练过程中，将数据集划分为训练集和验证集，使用训练集对模型进行训练，并在验证集上评估模型性能。通过测试，使用ResNet18模型对于垃圾分类任务的准确率比较高，一般在97%以上。

四、 模型保存和调用
在深度学习任务中，经过训练的模型被保存，以供后续使用。PyTorch 提供了方便的方法来保存和加载模型。本项目使用 PyTorch 保存 ResNet18 模型。在将模型保存后，可以将其加载到后端的代码中，以便接收前端传来的 base64 图片进行垃圾分类。